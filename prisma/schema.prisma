generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String? @db.String
  accessToken       String? @db.String
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String? @db.String
  sessionState      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid()) @map("_id")
  name           String?
  email          String?   @unique
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  orders         Order[]
  accounts       Account[]
  sessions       Session[]
}

enum OrderStatus {
  awaiting_shipment
  shipped
  fullfilled
}

model Order {
  id                String           @id @default(cuid()) @map("_id")
  userId            String
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount            Float
  currency          String
  status            OrderStatus
  configuration     Configuration    @relation(fields: [configurationId], references: [id])
  configurationId   String
  createdDate       DateTime         @default(now())
  paymentIntentId   String?          @unique
  isPaid            Boolean          @default(false)
  items             OrderItem[]
  ShippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  BillingAddress    BillingAddress?  @relation(fields: [billingAddressId], references: [id])
  billingAddressId  String?

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

model OrderItem {
  id       String  @id @default(cuid()) @map("_id")
  orderId  String
  order    Order   @relation(fields: [orderId], references: [id])
  name     String
  quantity Int
  price    Float
  image    String?
  size     String

  @@unique([orderId, name])
}

model Configuration {
  id              String         @id @default(cuid()) @map("_id")
  width           Int
  height          Int
  imageUrl        String
  type            ShirtType?
  material        ShirtMaterial?
  finish          ShirtFinish?
  color           ShirtColor?
  croppedImageUrl String?
  Order           Order[]
}

enum ShirtMaterial {
  silicone
  polycarbonate
}

enum ShirtFinish {
  smooth
  textured
}

enum ShirtType {
  longSleeve
  TShirt
  polo
}

enum ShirtColor {
  black
  brown
  white
}

model ShippingAddress {
  id          String  @id @default(cuid()) @map("_id")
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}

model BillingAddress {
  id          String  @id @default(cuid()) @map("_id")
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]
}
